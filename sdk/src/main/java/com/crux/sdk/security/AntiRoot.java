package com.crux.sdk.security;

import android.content.Context;
import android.content.pm.PackageManager;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.util.Log;


public class AntiRoot {


    private final Context mContext;
    private boolean loggingEnabled = true;
    private static final String TAG = "AntiRoot";

    public AntiRoot(Context context) {
        mContext = context;
    }

    public boolean isRooted() {

        return _detectTestKeys()
                || _detectRootManagementApps(null)
                || _detectPotentiallyDangerousApps(null)
                || _detectRootCloakingApps(null)
                || (_checkForBinary(AntiRootConst.BINARY_SU) || _checkForBinary(AntiRootConst.BINARY_BUSYBOX) || _checkForBinary(AntiRootConst.MAGISK))
                || _checkSuExists();

        // || _checkForRWPaths()
    }

    /**
     * Check if any package in the list is installed
     * @param packages - list of packages to search for
     * @return true if any of the packages are installed
     */
    private boolean isAnyPackageFromListInstalled(List<String> packages){
        boolean result = false;

        PackageManager pm = mContext.getPackageManager();

        for (String packageName : packages) {
            try {
                // Root app detected
                pm.getPackageInfo(packageName, 0);
                Log.e(TAG, packageName + " ROOT management app detected!");
                result = true;
            } catch (PackageManager.NameNotFoundException e) {
                // Exception thrown, package is not installed into the system
            }
        }

        return result;
    }


    /**
     * Release-Keys and Test-Keys has to do with how the kernel is signed when it is compiled.
     * Test-Keys means it was signed with a custom key generated by a third-party developer.
     * @return true if signed with Test-keys
     */
    public boolean _detectTestKeys() {
        String buildTags = android.os.Build.TAGS;
        return buildTags != null && buildTags.contains("test-keys");
    }

    /**
     * Using the PackageManager, check for a list of well known root apps. @link {AntiRootConst.knownRootAppsPackages}
     * @param additionalRootManagementApps - array of additional packagenames to search for
     * @return true if one of the apps it's installed
     */
    public boolean _detectRootManagementApps(String[] additionalRootManagementApps) {

        // Create a list of package names to iterate over from constants any others provided
        ArrayList<String> packages = new ArrayList<>(Arrays.asList(AntiRootConst.knownRootAppsPackages));
        if (additionalRootManagementApps!=null && additionalRootManagementApps.length>0){
            packages.addAll(Arrays.asList(additionalRootManagementApps));
        }

        return isAnyPackageFromListInstalled(packages);
    }

    /**
     * Using the PackageManager, check for a list of well known apps that require root. @link {AntiRootConst.knownRootAppsPackages}
     * @param additionalDangerousApps - array of additional packagenames to search for
     * @return true if one of the apps it's installed
     */
    public boolean _detectPotentiallyDangerousApps(String[] additionalDangerousApps) {

        // Create a list of package names to iterate over from constants any others provided
        ArrayList<String> packages = new ArrayList<>();
        packages.addAll(Arrays.asList(AntiRootConst.knownDangerousAppsPackages));
        if (additionalDangerousApps!=null && additionalDangerousApps.length>0){
            packages.addAll(Arrays.asList(additionalDangerousApps));
        }

        return isAnyPackageFromListInstalled(packages);
    }

    public boolean _detectRootCloakingApps(String[] additionalRootCloakingApps) {
        // Create a list of package names to iterate over from constants any others provided
        ArrayList<String> packages = new ArrayList<>();
        packages.addAll(Arrays.asList(AntiRootConst.knownRootCloakingPackages));
        if (additionalRootCloakingApps!=null && additionalRootCloakingApps.length>0){
            packages.addAll(Arrays.asList(additionalRootCloakingApps));
        }
        return isAnyPackageFromListInstalled(packages);
    }

    /**
     * A variation on the checking for SU, this attempts a 'which su'
     * @return true if su found
     */
    public boolean _checkSuExists() {
        Process process = null;
        try {
            process = Runtime.getRuntime().exec(new String[] { "which", AntiRootConst.BINARY_SU });
            BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
            return in.readLine() != null;
        } catch (Throwable t) {
            return false;
        } finally {
            if (process != null) process.destroy();
        }
    }


    /**
     *
     * @param filename - check for this existence of this file
     * @return true if found
     */
    public boolean _checkForBinary(String filename) {

        String[] pathsArray = AntiRootConst.suPaths;

        boolean result = false;

        for (String path : pathsArray) {
            String completePath = path + filename;
            File f = new File(path, filename);
            boolean fileExists = f.exists();
            if (fileExists) {
                Log.v(TAG, completePath + " binary detected!");
                result = true;
            }
        }

        return result;
    }


//    private String[] mountReader() {
//        try {
//            InputStream inputstream = Runtime.getRuntime().exec("mount").getInputStream();
//            if (inputstream == null) return null;
//            String propVal = new Scanner(inputstream).useDelimiter("\\A").next();
//            return propVal.split("\n");
//        } catch (IOException | NoSuchElementException e) {
//            e.printStackTrace();
//            return null;
//        }
//    }
//
//    /**
//     * When you're root you can change the permissions on common system directories, this method checks if any of these paths AntiRootConst.pathsThatShouldNotBeWritable are writable.
//     * @return true if one of the dir is writable
//     */
//    public boolean _checkForRWPaths() {
//
//        boolean result = false;
//
//        String[] lines = mountReader();
//
//        if (lines == null){
//            // Could not read, assume false;
//            return false;
//        }
//
//        for (String line : lines) {
//
//            // Split lines into parts
//            String[] args = line.split(" ");
//
//            if (args.length < 4){
//                // If we don't have enough options per line, skip this and log an error
//                Log.e(TAG, "Error formatting mount line: "+line);
//                continue;
//            }
//
//            String mountPoint = args[1];
//            String mountOptions = args[3];
//
//            for(String pathToCheck: AntiRootConst.pathsThatShouldNotBeWritable) {
//                if (mountPoint.equalsIgnoreCase(pathToCheck)) {
//
//                    // Split options out and compare against "rw" to avoid false positives
//                    for (String option : mountOptions.split(",")){
//
//                        if (option.equalsIgnoreCase("rw")){
//                            Log.v(TAG, pathToCheck+" path is mounted with rw permissions! "+line);
//                            result = true;
//                            break;
//                        }
//                    }
//                }
//            }
//        }
//
//        return result;
//    }


}
